{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createCommentVNode as _createCommentVNode, withModifiers as _withModifiers, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_custom_button = _resolveComponent(\"custom-button\");\n\n  return $props.show ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"modal\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.hideModal && $options.hideModal(...args))\n  }, [_createElementVNode(\"div\", {\n    onClick: _cache[0] || (_cache[0] = _withModifiers(() => {}, [\"stop\"])),\n    class: \"modal__content\"\n  }, [_createVNode(_component_custom_button, null, {\n    default: _withCtx(() => [_createTextVNode(\"Создать строку\")]),\n    _: 1\n    /* STABLE */\n\n  }), _createCommentVNode(\" <todo-form/> \")])])) : _createCommentVNode(\"v-if\", true);\n}","map":{"version":3,"mappings":";;;;SAC6BA,6BAAzBC,oBAKM,KALN,EAKM;UAAA;IALDC,KAAK,EAAC,OAKL;IAL0BC,OAAK,yCAAEC,iDAAF;EAK/B,CALN,GACIC,oBAGM,KAHN,EAGM;IAHAF,OAAK,2CAAN,OAAW,CAAL,EAAK,QAAL,EAGL;IAHWD,KAAK,EAAC;EAGjB,CAHN,GACII,aAA6CC,wBAA7C,EAA6C,IAA7C,EAA6C;sBAA9B,MAAc,kBAAd,iBAAc,EAAgB;;;;EAAA,CAA7C,GACAC,sCAFJ,EADJ","names":["$props","_createElementBlock","class","onClick","$options","_createElementVNode","_createVNode","_component_custom_button","_createCommentVNode"],"sourceRoot":"","sources":["C:\\Users\\Лидия\\Desktop\\Frontend\\fullstack-practice\\client\\src\\components\\UI\\ModalComponent.vue"],"sourcesContent":["<template>\r\n    <div class=\"modal\" v-if=\"show\" @click=\"hideModal\">\r\n        <div @click.stop class=\"modal__content\">\r\n            <custom-button>Создать строку</custom-button>\r\n            <!-- <todo-form/> -->\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        props: {\r\n            show: {\r\n                type: Boolean,\r\n                default: false\r\n            }\r\n        },\r\n        methods: {\r\n            hideModal() {\r\n                this.$emit('update:isShowen', false)\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"css\" scoped>\r\n    .modal {\r\n        position: fixed;\r\n        top: 0;\r\n        right: 0;\r\n        left: 0;\r\n        bottom: 0;\r\n        justify-content: center;\r\n        align-items: center;\r\n        display: flex;\r\n        background-color: rgba(255, 255, 255, 0.01);\r\n        backdrop-filter: blur(4px);\r\n        z-index: 10000;\r\n    }\r\n\r\n    .modal__content {\r\n        margin: auto;\r\n        padding: 30px;\r\n        background-color: #fff;\r\n    }\r\n</style>"]},"metadata":{},"sourceType":"module"}