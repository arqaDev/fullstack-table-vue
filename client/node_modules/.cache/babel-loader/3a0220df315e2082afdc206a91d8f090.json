{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  style: {\n    \"display\": \"flex\",\n    \"justify-content\": \"space-between\",\n    \"align-items\": \"center\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_modal_component = _resolveComponent(\"modal-component\");\n\n  const _component_custom_button = _resolveComponent(\"custom-button\");\n\n  const _component_search_and_sort = _resolveComponent(\"search-and-sort\");\n\n  const _component_table_component = _resolveComponent(\"table-component\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_modal_component, {\n    show: $data.isShowen,\n    onCreate: $options.addRow,\n    \"onUpdate:show\": _cache[0] || (_cache[0] = $event => $data.isShowen = $event)\n  }, null, 8\n  /* PROPS */\n  , [\"show\", \"onCreate\"]), _createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_custom_button, {\n    onClick: $options.showModal\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Add Row\")]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"onClick\"]), _createVNode(_component_search_and_sort, {\n    modelValue: $data.selectedSort,\n    \"onUpdate:modelValue\": $options.setSelectedSort\n  }, null, 8\n  /* PROPS */\n  , [\"modelValue\", \"onUpdate:modelValue\"])]), _createVNode(_component_table_component, {\n    rows: $data.rows\n  }, null, 8\n  /* PROPS */\n  , [\"rows\"])], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;EAMOA,KAA2E,EAA3E;IAAA;IAAA;IAAA;EAAA;;;;;;;;;;;6DALLC,aAIEC,0BAJF,EAIE;IAHCC,IAAI,EAAEC,cAGP;IAFCC,QAAM,EAAEC,eAET;yDADcF,iBAAQG;EACtB,CAJF;;EAAA,yBAKAC,oBAMM,KANN,cAMM,CALJP,aAAyDQ,wBAAzD,EAAyD;IAAzCC,OAAK,EAAEJ;EAAkC,CAAzD,EAAgC;sBAAE,MAAO,kBAAP,UAAO,EAAT;;;;EAAA,CAAhC;;EAAA,cAKI,EAJJL,aAGEU,0BAHF,EAGE;IAFCC,UAAU,EAAER,kBAEb;IADC,uBAAmBE;EACpB,CAHF;;EAAA,wCAII,CANN,GAOAL,aAEEY,0BAFF,EAEE;IADCC,IAAI,EAAEV;EACP,CAFF,EACa,IADb,EACa;EAAA;EADb,EACa,QADb","names":["style","_createVNode","_component_modal_component","show","$data","onCreate","$options","$event","_createElementVNode","_component_custom_button","onClick","_component_search_and_sort","modelValue","_component_table_component","rows"],"sourceRoot":"","sources":["C:\\Users\\Лидия\\Desktop\\Frontend\\fullstack-practice\\client\\src\\App.vue"],"sourcesContent":["<template>\n  <modal-component\n    :show=\"isShowen\"\n    @create=\"addRow\"\n    v-model:show=\"isShowen\"\n  />\n  <div style=\"display: flex; justify-content: space-between; align-items: center;\">\n    <custom-button @click=\"showModal\">Add Row</custom-button>\n    <search-and-sort\n      :modelValue=\"selectedSort\"\n      @update:modelValue=\"setSelectedSort\"\n    />\n  </div>\n  <table-component\n    :rows=\"rows\"\n  /> \n</template>\n\n<script>\n  import axios from 'axios';\n  import TableComponent from './components/TableComponent.vue';\n  import ModalComponent from './components/UI/ModalComponent.vue';\n  import SearchAndSort from './components/UI/SearchAndSort.vue';\n\n  export default {\n    name: 'App',\n    components: {\n      TableComponent,\n      ModalComponent,\n      SearchAndSort\n    },\n    data() {\n      return {\n        rows: [],\n        isShowen: false,\n        selectedSort: ''\n      }\n    },\n    methods: {\n      async addRow (title, quantity, distance) {\n        const $host = axios.create({\n            baseURL: process.env.VUE_APP_API_URL\n        })\n        const data = await $host.post('api/table', {title, quantity, distance})\n        return data\n      },\n      async fetchTable() {\n        const $host = axios.create({\n            baseURL: process.env.VUE_APP_API_URL\n        })\n        const {data} = await $host.get('api/table')\n        if (this.selectedSort) {\n            console.log(data[0]['quantity'])\n            this.rows = [...data].sort((row1, row2) => row1[this.selectedSort].localeCompare(row2[this.selectedSort]))\n        } else {\n            this.rows = data\n        }\n      },\n      setSelectedSort(type) {\n        this.selectedSort = type\n      },\n      showModal() {\n        this.isShowen = true\n      }\n    },\n    mounted() {\n      this.fetchTable()\n    },\n    watch: {\n      selectedSort() {\n        this.fetchTable()\n      }\n    }\n}\n</script>\n\n<style>\n  @import url('https://fonts.googleapis.com/css2?family=Poppins&display=swap');\n\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-size: 14px;\n    font-family: 'Poppins', sans-serif;\n  }\n\n  body {\n    padding: 5% 10%;\n    background: #f5f5f5;\n  }\n</style>\n"]},"metadata":{},"sourceType":"module"}